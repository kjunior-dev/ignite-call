import { NextRequest, NextResponse } from 'next/server';
import { prisma } from "@/lib/prisma";

export async function GET(req: NextRequest) {
    console.log('üì• [GET] /api/users chamado');

    try {
        const data = await prisma.user.findMany();
        console.log('‚úÖ [GET] Usu√°rios encontrados:', data.length);
        return NextResponse.json(data);
    } catch (err) {
        console.error('‚ùå [GET] Erro ao buscar usu√°rios:', err);
        return NextResponse.json(
            { error: 'Erro ao buscar usu√°rios', details: String(err) },
            { status: 500 }
        );
    }
}

export async function POST(req: NextRequest) {
    console.log('üì• [POST] /api/users chamado');

    try {
        const body = await req.json();
        console.log('üì¶ [POST] Body recebido:', body);

        const { name, username } = body;

        if (!name || !username) {
            console.warn('‚ö†Ô∏è [POST] Campos obrigat√≥rios ausentes:', { name, username });
            return NextResponse.json(
                { message: 'Nome e username s√£o obrigat√≥rios' },
                { status: 400 }
            );
        }

        console.log('üîç [POST] Verificando se username j√° existe...');
        const userExists = await prisma.user.findUnique({
            where: { username },
        });

        if (userExists) {
            console.warn('‚ö†Ô∏è [POST] Usu√°rio j√° existe:', username);
            return NextResponse.json(
                { message: 'Usu√°rio j√° existe' },
                { status: 400 }
            );
        }

        console.log('üõ†Ô∏è [POST] Criando usu√°rio...');
        const user = await prisma.user.create({
            data: { name, username },
        });
        console.log('‚úÖ [POST] Usu√°rio criado com sucesso:', user);

        const response = NextResponse.json({ message: 'Usu√°rio criado!', user });

        console.log('üç™ [POST] Definindo cookie do usu√°rio...');
        response.cookies.set({
            name: '@ignite-call:userId',
            value: String(user.id),
            maxAge: 60 * 60 * 24 * 7, // 7 dias
            path: '/',
            httpOnly: true,
            sameSite: 'lax',
            secure: process.env.NODE_ENV === 'production',
        });

        console.log('‚úÖ [POST] Cookie definido com sucesso!');
        return response;

    } catch (error) {
        console.error('‚ùå [POST] Erro inesperado ao criar usu√°rio:', error);
        return NextResponse.json(
            { error: 'Erro ao criar usu√°rio', details: String(error) },
            { status: 500 }
        );
    }
}

export async function DELETE(req: Request) {
    console.log('üì• [DELETE] /api/users chamado');

    try {
        const body = await req.json();
        console.log('üì¶ [DELETE] Body recebido:', body);

        const { id } = body;

        if (!id) {
            console.warn('‚ö†Ô∏è [DELETE] ID n√£o fornecido');
            return NextResponse.json(
                { message: 'ID √© obrigat√≥rio para exclus√£o' },
                { status: 400 }
            );
        }

        console.log('üóëÔ∏è [DELETE] Deletando usu√°rio com ID:', id);
        const user = await prisma.user.delete({
            where: { id },
        });

        console.log('‚úÖ [DELETE] Usu√°rio deletado com sucesso:', user);
        return NextResponse.json({ message: 'Usu√°rio deletado!', user });

    } catch (error) {
        console.error('‚ùå [DELETE] Erro ao deletar usu√°rio:', error);
        return NextResponse.json(
            { error: 'Erro ao deletar usu√°rio', details: String(error) },
            { status: 500 }
        );
    }
}
